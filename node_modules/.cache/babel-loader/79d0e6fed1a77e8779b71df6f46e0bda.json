{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { fetchData } from './api/api';\nimport { scrambledWord } from './helpers/ScrambleWord';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Heading = _ref => {\n  let {\n    content\n  } = _ref;\n  const styles = {\n    textAlign: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    style: styles,\n    id: \"scrambled-word\",\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 11\n  }, this);\n};\n\n_c = Heading;\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState({\n    sentence: ''\n  });\n  const [sentenceToCompare, setSentenceToCompare] = useState({});\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetchData(1);\n      const {\n        data\n      } = await response.data;\n      console.log(data);\n      setData(data);\n    };\n\n    getData();\n  }, []);\n\n  const handleLettersInput = e => {\n    e.preventDefualt();\n    setSentenceToCompare({ ...sentenceToCompare,\n      [e.target.id]: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    id: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      content: scrambledWord(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"par\",\n      children: \"Guess the sentence! Starting typing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"par\",\n      children: \"The yellow blocks are meant for spaces\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: data.sentence.split('').map((letter, index) => {\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          id: letter,\n          value: sentenceToCompare[letter],\n          onChange: handleLettersInput\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 33\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 11\n  }, this);\n};\n\n_s(App, \"ok0Bh1m6D1KHbMijWmm6ZOwe1N0=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Heading\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","scrambledWord","Heading","content","styles","textAlign","App","data","setData","sentence","sentenceToCompare","setSentenceToCompare","getData","response","console","log","handleLettersInput","e","preventDefualt","target","id","value","split","map","letter","index"],"sources":["/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {fetchData} from './api/api';\nimport { scrambledWord } from './helpers/ScrambleWord';\nimport './App.css';\n\nconst Heading = ({ content }) => {\n     const styles = {\n          textAlign: 'center'\n     }\n\n     return (\n          <h1 style={ styles } id='scrambled-word'>{ content }</h1>\n     )\n}\n\nconst App = () => {\n     const [data, setData] = useState({sentence: ''});\n     const [sentenceToCompare, setSentenceToCompare] = useState({});\n\n     useEffect(() => {\n          const getData = async () => {\n               const response = await fetchData(1);\n               const { data } = await response.data;\n               console.log(data)\n               setData(data);\n          };\n          \n          getData()\n     },[]);\n\n     const handleLettersInput = (e) => {\n          e.preventDefualt();\n          setSentenceToCompare({...sentenceToCompare, [e.target.id]: e.target.value})\n     }\n\n     return (\n          <main id='main'>\n               <Heading content={ scrambledWord(data) }/>\n               <p className='par'>Guess the sentence! Starting typing</p>\n               <p className='par'>The yellow blocks are meant for spaces</p>\n               <form>\n                    {  data.sentence.split('').map((letter, index) => {\n                         return <input key={index} id={letter} value={ sentenceToCompare[letter] } onChange={ handleLettersInput } />\n                    }) }\n               </form>\n          </main>\n     );\n};\n\nexport default App;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAQC,SAAR,QAAwB,WAAxB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,WAAP;;;AAEA,MAAMC,OAAO,GAAG,QAAiB;EAAA,IAAhB;IAAEC;EAAF,CAAgB;EAC5B,MAAMC,MAAM,GAAG;IACVC,SAAS,EAAE;EADD,CAAf;EAIA,oBACK;IAAI,KAAK,EAAGD,MAAZ;IAAqB,EAAE,EAAC,gBAAxB;IAAA,UAA2CD;EAA3C;IAAA;IAAA;IAAA;EAAA,QADL;AAGJ,CARD;;KAAMD,O;;AAUN,MAAMI,GAAG,GAAG,MAAM;EAAA;;EACb,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC;IAACU,QAAQ,EAAE;EAAX,CAAD,CAAhC;EACA,MAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CZ,QAAQ,CAAC,EAAD,CAA1D;EAEAD,SAAS,CAAC,MAAM;IACX,MAAMc,OAAO,GAAG,YAAY;MACvB,MAAMC,QAAQ,GAAG,MAAMb,SAAS,CAAC,CAAD,CAAhC;MACA,MAAM;QAAEO;MAAF,IAAW,MAAMM,QAAQ,CAACN,IAAhC;MACAO,OAAO,CAACC,GAAR,CAAYR,IAAZ;MACAC,OAAO,CAACD,IAAD,CAAP;IACJ,CALD;;IAOAK,OAAO;EACX,CATQ,EASP,EATO,CAAT;;EAWA,MAAMI,kBAAkB,GAAIC,CAAD,IAAO;IAC7BA,CAAC,CAACC,cAAF;IACAP,oBAAoB,CAAC,EAAC,GAAGD,iBAAJ;MAAuB,CAACO,CAAC,CAACE,MAAF,CAASC,EAAV,GAAeH,CAAC,CAACE,MAAF,CAASE;IAA/C,CAAD,CAApB;EACJ,CAHD;;EAKA,oBACK;IAAM,EAAE,EAAC,MAAT;IAAA,wBACK,QAAC,OAAD;MAAS,OAAO,EAAGpB,aAAa,CAACM,IAAD;IAAhC;MAAA;MAAA;MAAA;IAAA,QADL,eAEK;MAAG,SAAS,EAAC,KAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFL,eAGK;MAAG,SAAS,EAAC,KAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHL,eAIK;MAAA,UACQA,IAAI,CAACE,QAAL,CAAca,KAAd,CAAoB,EAApB,EAAwBC,GAAxB,CAA4B,CAACC,MAAD,EAASC,KAAT,KAAmB;QAC7C,oBAAO;UAAmB,EAAE,EAAED,MAAvB;UAA+B,KAAK,EAAGd,iBAAiB,CAACc,MAAD,CAAxD;UAAmE,QAAQ,EAAGR;QAA9E,GAAYS,KAAZ;UAAA;UAAA;UAAA;QAAA,QAAP;MACJ,CAFE;IADR;MAAA;MAAA;MAAA;IAAA,QAJL;EAAA;IAAA;IAAA;IAAA;EAAA,QADL;AAYJ,CAhCD;;GAAMnB,G;;MAAAA,G;AAkCN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}