{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { fetchData } from './api/api';\nimport { scrambledWord } from './helpers/ScrambleWord';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Heading = _ref => {\n  let {\n    content\n  } = _ref;\n  const styles = {\n    textAlign: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    style: styles,\n    id: \"scrambled-word\",\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 11\n  }, this);\n};\n\n_c = Heading;\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState({\n    sentence: ''\n  });\n  const [sentence, setSentence] = useState('');\n  const [sentenceToCompare, setSentenceToCompare] = useState({});\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetchData(1);\n      const {\n        data\n      } = await response.data;\n      console.log(data);\n      setData(data);\n    };\n\n    getData().catch(err => console.log(err.message));\n  }, []);\n  useEffect(() => {\n    if (data) setSentence(scrambledWord(data));\n  }, [data]);\n\n  const handleLettersInput = e => {\n    e.preventDefault();\n    setSentenceToCompare({ ...sentenceToCompare,\n      [e.target.id]: e.target.value\n    });\n  };\n\n  const nextItemChange = e => {\n    const item = document.getElementById(`${Number(e.target.id) + 1}`);\n\n    if (!item) {\n      return false;\n    }\n\n    item.focus();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    id: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        content: sentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"par\",\n        children: \"Guess the sentence! Starting typing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"par\",\n        children: \"The yellow blocks are meant for spaces\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"par\",\n        children: \"Score: 0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: data.sentence.split(/(\\s+)/).map((word, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: word.split('').map((letter, index) => {\n              if (letter === ' ') {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: index,\n                  value: sentenceToCompare[letter],\n                  onChange: handleLettersInput,\n                  maxLength: 1,\n                  onKeyUp: nextItemChange,\n                  className: \"space\"\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 61\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: index,\n                  value: sentenceToCompare[letter],\n                  onChange: handleLettersInput,\n                  maxLength: 1,\n                  onKeyUp: nextItemChange,\n                  className: \"letter\"\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 56\n                }, this);\n              }\n            })\n          }, index + 100, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 11\n  }, this);\n};\n\n_s(App, \"7WUFtC0jxqOcJnZ64hNB/R+IZiU=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Heading\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","scrambledWord","Heading","content","styles","textAlign","App","data","setData","sentence","setSentence","sentenceToCompare","setSentenceToCompare","getData","response","console","log","catch","err","message","handleLettersInput","e","preventDefault","target","id","value","nextItemChange","item","document","getElementById","Number","focus","split","map","word","index","letter"],"sources":["/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {fetchData} from './api/api';\nimport { scrambledWord } from './helpers/ScrambleWord';\nimport './App.css';\n\nconst Heading = ({ content }) => {\n     const styles = {\n          textAlign: 'center'\n     }\n\n     return (\n          <h1 style={ styles } id='scrambled-word'>{ content }</h1>\n     )\n}\n\nconst App = () => {\n     const [data, setData] = useState({sentence: ''});\n     const [sentence, setSentence] = useState('');\n     const [sentenceToCompare, setSentenceToCompare] = useState({});\n\n     useEffect(() => {\n          const getData = async () => {\n               const response = await fetchData(1);\n               const { data } = await response.data;\n               console.log(data)\n               setData(data);\n          };\n          \n          getData().catch(err => console.log(err.message));\n     },[]);\n\n     useEffect(() => {\n          if (data) setSentence(scrambledWord(data))\n     },[data]);\n\n     const handleLettersInput = (e) => {\n          e.preventDefault();\n          setSentenceToCompare({...sentenceToCompare, [e.target.id]: e.target.value})\n     };\n\n     const nextItemChange = (e) => {\n          const item = document.getElementById(`${Number(e.target.id) + 1}`);\n          if(!item) {\n               return false\n          } \n          item.focus()\n     };\n\n     return (\n          <main id='main'>\n               <div className='container'>\n                    <Heading content={ sentence }/>\n                    <p className='par'>Guess the sentence! Starting typing</p>\n                    <p className='par'>The yellow blocks are meant for spaces</p>\n                    <p className='par'>Score: 0</p>\n                    <form>\n                         {data.sentence.split(/(\\s+)/).map((word, index) => {\n\n                              return (\n                                   <div key={ index + 100 }>\n                                        { word.split('').map((letter, index) => {\n                                             if(letter === ' ' ){\n                                                  return (\n                                                            <input \n                                                            key={index} \n                                                            id={index} \n                                                            value={ sentenceToCompare[letter] } \n                                                            onChange={ handleLettersInput } \n                                                            maxLength={1} \n                                                            onKeyUp={ nextItemChange }\n                                                            className='space'\n                                                            />\n                                                  )\n                                             } else {\n                                                  return (\n                                                       <input \n                                                            key={index} \n                                                            id={index} \n                                                            value={ sentenceToCompare[letter] } \n                                                            onChange={ handleLettersInput } \n                                                            maxLength={1} \n                                                            onKeyUp={ nextItemChange }\n                                                            className='letter'\n                                                            />\n                                                  ) \n                                             }\n                                        })}\n                                   </div>\n                              )\n                         })}\n                    </form>\n               </div>\n          </main>\n     );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}