{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { fetchData } from './api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Heading = _ref => {\n  let {\n    content\n  } = _ref;\n  const styles = {\n    textAlign: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    style: styles,\n    id: \"scrambled-word\",\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 11\n  }, this);\n};\n\n_c = Heading;\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState({});\n  const [sentence, setSentence] = useState('');\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetchData(1);\n      const {\n        data\n      } = response.data;\n      setData(data);\n    };\n\n    getData().catch(err => console.log(err.message));\n  }, []);\n\n  (() => {\n    if (!data) {\n      return false;\n    } else {\n      const sentenceArr = data.sentence.split(' ');\n      let newSentenceArr = [];\n      sentenceArr.forEach(word => {\n        if (word.length <= 3) {\n          newSentenceArr.push(word);\n        } else {\n          const oldWord = word.split('').slice(1, -1);\n          const newWord = (word[0] + word[word.length - 1]).split('');\n\n          for (let i = 0; i < oldWord.length; i++) {\n            if (oldWord.length === 2) {\n              const tmp = oldWord[0];\n              oldWord[0] = oldWord[1];\n              oldWord[1] = tmp;\n            }\n\n            const a = Math.floor(Math.random() * oldWord.length);\n            let tmp = oldWord[i];\n            oldWord[i] = oldWord[a];\n            oldWord[a] = tmp;\n          }\n\n          oldWord.map(i => newWord.splice(2, 0, i));\n          newSentenceArr.push(newWord.join(''));\n        }\n      });\n      setSentence(newSentenceArr.join(' '));\n    }\n  })();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Heading, {\n      content: sentence\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"GHCJ7H5PuRgh/jky3hbP7uCt3GQ=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Heading\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","Heading","content","styles","textAlign","App","data","setData","sentence","setSentence","getData","response","catch","err","console","log","message","sentenceArr","split","newSentenceArr","forEach","word","length","push","oldWord","slice","newWord","i","tmp","a","Math","floor","random","map","splice","join"],"sources":["/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {fetchData} from './api/api';\n\nconst Heading = ({ content }) => {\n     const styles = {\n          textAlign: 'center'\n     }\n\n     return (\n          <h1 style={ styles } id='scrambled-word'>{ content }</h1>\n     )\n}\n\nconst App = () => {\n     const [data, setData] = useState({});\n     const [sentence, setSentence] = useState('');\n\n     useEffect(() => {\n          const getData = async () => {\n               const response = await fetchData(1);\n               const { data } = response.data;\n               setData(data);\n          };\n          \n          getData().catch(err => console.log(err.message));\n     },[]);\n     \n    (() => {\n          if(!data) {\n               return false\n          } else {\n               const sentenceArr = data.sentence.split(' ');\n               let newSentenceArr = [];\n          \n               sentenceArr.forEach(word => {\n                    if (word.length <= 3) {\n                         newSentenceArr.push(word)\n                    } else {\n                         const oldWord = word.split('').slice(1, -1);\n                         const newWord = (word[0] + word[word.length - 1]).split('');\n                         \n                         for(let i = 0; i < oldWord.length; i++){\n                              if(oldWord.length === 2){\n                                   const tmp = oldWord[0]\n                                   oldWord[0] = oldWord[1]\n                                   oldWord[1] = tmp;\n                              } \n                              const a = Math.floor(Math.random() * oldWord.length);\n                              let tmp = oldWord[i];\n                              oldWord[i] = oldWord[a];\n                              oldWord[a] = tmp\n                         }\n                         oldWord.map(i => newWord.splice(2, 0, i));\n                         newSentenceArr.push(newWord.join(''));\n                    }\n               });\n               \n               setSentence(newSentenceArr.join(' '));\n          }\n     })();\n\n     \n\n     \n\n     return (\n          <>\n               <Heading content={ sentence }/>\n               {/* <p onClick={ scrambledWord }>CLick</p> */}\n          </>\n     );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}