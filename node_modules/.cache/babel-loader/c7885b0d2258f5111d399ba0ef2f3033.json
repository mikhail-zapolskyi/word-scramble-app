{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { fetchData } from './api/api';\nimport { scrambledWord } from './helpers/ScrambleWord';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Heading = _ref => {\n  let {\n    content\n  } = _ref;\n  const styles = {\n    textAlign: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    style: styles,\n    id: \"scrambled-word\",\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 11\n  }, this);\n};\n\n_c = Heading;\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState({\n    sentence: ''\n  });\n  const [sentence, setSentence] = useState('');\n  const [sentenceToCompare, setSentenceToCompare] = useState({});\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetchData(1);\n      const {\n        data\n      } = await response.data;\n      console.log(data);\n      setData(data);\n    };\n\n    getData().catch(err => console.log(err.message));\n  }, []);\n  useEffect(() => {\n    if (data) setSentence(scrambledWord(data));\n  }, [data]);\n\n  const handleLettersInput = e => {\n    e.preventDefault();\n    setSentenceToCompare({ ...sentenceToCompare,\n      [e.target.id]: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    id: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      content: sentence\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"par\",\n      children: \"Guess the sentence! Starting typing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"par\",\n      children: \"The yellow blocks are meant for spaces\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: data.sentence.split('').map((letter, index) => {\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          id: index,\n          value: sentenceToCompare[letter],\n          onChange: handleLettersInput,\n          maxLength: 1,\n          onKeyUp: e => console.log(document.getElementById(`${Number(e.target.id) + 1}`))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 33\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 11\n  }, this);\n};\n\n_s(App, \"7WUFtC0jxqOcJnZ64hNB/R+IZiU=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Heading\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","scrambledWord","Heading","content","styles","textAlign","App","data","setData","sentence","setSentence","sentenceToCompare","setSentenceToCompare","getData","response","console","log","catch","err","message","handleLettersInput","e","preventDefault","target","id","value","split","map","letter","index","document","getElementById","Number"],"sources":["/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {fetchData} from './api/api';\nimport { scrambledWord } from './helpers/ScrambleWord';\nimport './App.css';\n\nconst Heading = ({ content }) => {\n     const styles = {\n          textAlign: 'center'\n     }\n\n     return (\n          <h1 style={ styles } id='scrambled-word'>{ content }</h1>\n     )\n}\n\nconst App = () => {\n     const [data, setData] = useState({sentence: ''});\n     const [sentence, setSentence] = useState('');\n     const [sentenceToCompare, setSentenceToCompare] = useState({});\n\n     useEffect(() => {\n          const getData = async () => {\n               const response = await fetchData(1);\n               const { data } = await response.data;\n               console.log(data)\n               setData(data);\n          };\n          \n          getData().catch(err => console.log(err.message));\n     },[]);\n\n     useEffect(() => {\n          if (data) setSentence(scrambledWord(data))\n     },[data]);\n\n     const handleLettersInput = (e) => {\n          e.preventDefault();\n          setSentenceToCompare({...sentenceToCompare, [e.target.id]: e.target.value})\n     }\n\n     return (\n          <main id='main'>\n               <Heading content={ sentence }/>\n               <p className='par'>Guess the sentence! Starting typing</p>\n               <p className='par'>The yellow blocks are meant for spaces</p>\n               <form>\n                    {  data.sentence.split('').map((letter, index) => {\n                         return <input \n                                   key={index} \n                                   id={index} \n                                   value={ sentenceToCompare[letter] } \n                                   onChange={ handleLettersInput } \n                                   maxLength={1} \n                                   onKeyUp={(e) => console.log(document.getElementById(`${Number(e.target.id) + 1}`))}\n                                   />\n                    }) }\n               </form>\n          </main>\n     );\n};\n\nexport default App;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAQC,SAAR,QAAwB,WAAxB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,WAAP;;;AAEA,MAAMC,OAAO,GAAG,QAAiB;EAAA,IAAhB;IAAEC;EAAF,CAAgB;EAC5B,MAAMC,MAAM,GAAG;IACVC,SAAS,EAAE;EADD,CAAf;EAIA,oBACK;IAAI,KAAK,EAAGD,MAAZ;IAAqB,EAAE,EAAC,gBAAxB;IAAA,UAA2CD;EAA3C;IAAA;IAAA;IAAA;EAAA,QADL;AAGJ,CARD;;KAAMD,O;;AAUN,MAAMI,GAAG,GAAG,MAAM;EAAA;;EACb,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC;IAACU,QAAQ,EAAE;EAAX,CAAD,CAAhC;EACA,MAAM,CAACA,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACY,iBAAD,EAAoBC,oBAApB,IAA4Cb,QAAQ,CAAC,EAAD,CAA1D;EAEAD,SAAS,CAAC,MAAM;IACX,MAAMe,OAAO,GAAG,YAAY;MACvB,MAAMC,QAAQ,GAAG,MAAMd,SAAS,CAAC,CAAD,CAAhC;MACA,MAAM;QAAEO;MAAF,IAAW,MAAMO,QAAQ,CAACP,IAAhC;MACAQ,OAAO,CAACC,GAAR,CAAYT,IAAZ;MACAC,OAAO,CAACD,IAAD,CAAP;IACJ,CALD;;IAOAM,OAAO,GAAGI,KAAV,CAAgBC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAYE,GAAG,CAACC,OAAhB,CAAvB;EACJ,CATQ,EASP,EATO,CAAT;EAWArB,SAAS,CAAC,MAAM;IACX,IAAIS,IAAJ,EAAUG,WAAW,CAACT,aAAa,CAACM,IAAD,CAAd,CAAX;EACd,CAFQ,EAEP,CAACA,IAAD,CAFO,CAAT;;EAIA,MAAMa,kBAAkB,GAAIC,CAAD,IAAO;IAC7BA,CAAC,CAACC,cAAF;IACAV,oBAAoB,CAAC,EAAC,GAAGD,iBAAJ;MAAuB,CAACU,CAAC,CAACE,MAAF,CAASC,EAAV,GAAeH,CAAC,CAACE,MAAF,CAASE;IAA/C,CAAD,CAApB;EACJ,CAHD;;EAKA,oBACK;IAAM,EAAE,EAAC,MAAT;IAAA,wBACK,QAAC,OAAD;MAAS,OAAO,EAAGhB;IAAnB;MAAA;MAAA;MAAA;IAAA,QADL,eAEK;MAAG,SAAS,EAAC,KAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFL,eAGK;MAAG,SAAS,EAAC,KAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHL,eAIK;MAAA,UACQF,IAAI,CAACE,QAAL,CAAciB,KAAd,CAAoB,EAApB,EAAwBC,GAAxB,CAA4B,CAACC,MAAD,EAASC,KAAT,KAAmB;QAC7C,oBAAO;UAEG,EAAE,EAAEA,KAFP;UAGG,KAAK,EAAGlB,iBAAiB,CAACiB,MAAD,CAH5B;UAIG,QAAQ,EAAGR,kBAJd;UAKG,SAAS,EAAE,CALd;UAMG,OAAO,EAAGC,CAAD,IAAON,OAAO,CAACC,GAAR,CAAYc,QAAQ,CAACC,cAAT,CAAyB,GAAEC,MAAM,CAACX,CAAC,CAACE,MAAF,CAASC,EAAV,CAAN,GAAsB,CAAE,EAAnD,CAAZ;QANnB,GACQK,KADR;UAAA;UAAA;UAAA;QAAA,QAAP;MAQJ,CATE;IADR;MAAA;MAAA;MAAA;IAAA,QAJL;EAAA;IAAA;IAAA;IAAA;EAAA,QADL;AAmBJ,CA5CD;;GAAMvB,G;;MAAAA,G;AA8CN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}