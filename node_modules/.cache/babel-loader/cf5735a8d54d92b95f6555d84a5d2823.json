{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { fetchData } from './api/api';\nimport { scrambledWord } from './helpers/ScrambleWord';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Heading = _ref => {\n  let {\n    content\n  } = _ref;\n  const styles = {\n    textAlign: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    style: styles,\n    id: \"scrambled-word\",\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 11\n  }, this);\n};\n\n_c = Heading;\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState({\n    sentence: ''\n  });\n  const [sentence, setSentence] = useState('');\n  const [sentenceToCompare, setSentenceToCompare] = useState({});\n  let letterId;\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetchData(10);\n      const {\n        data\n      } = await response.data;\n      setData(data);\n    };\n\n    getData().catch(err => console.log(err.message));\n  }, []);\n  useEffect(() => {\n    if (data) setSentence(scrambledWord(data));\n  }, [data]);\n\n  const handleLettersInput = e => {\n    e.preventDefault();\n    setSentenceToCompare({ ...sentenceToCompare,\n      [e.target.id]: {\n        value: e.target.value,\n        correctGuess: false\n      }\n    }); // const itemToCompare = sentenceToCompare[e.target.id];\n\n    const arr = Array.from(data.sentence);\n    arr.map((item, index) => {\n      if (index === Number(e.target.id) && item === e.target.value) {\n        setSentenceToCompare({ ...sentenceToCompare,\n          [e.target.id]: { ...{},\n            correctGuess: true\n          }\n        });\n        return true;\n      } else {\n        return false;\n      }\n    });\n  };\n\n  const nextItemChange = e => {\n    if (e.keyCode === 46 || e.keyCode === 8) {\n      const item = document.getElementById(`${Number(e.target.id) - 1}`);\n\n      if (!item) {\n        return false;\n      }\n\n      item.focus();\n    } else {\n      const item = document.getElementById(`${Number(e.target.id) + 1}`);\n\n      if (!item) {\n        return false;\n      }\n\n      item.focus();\n    }\n  };\n\n  const checkCorrectGuess = () => {\n    const sentenceToCheckForCorrectness = Object.entries(sentenceToCompare);\n    const isAllLetterCorrect = sentenceToCheckForCorrectness.map(i => i[1].correctGuess).length;\n    const length = sentence.length;\n    console.log(isAllLetterCorrect);\n    console.log(length);\n    return isAllLetterCorrect === length;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    id: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        content: sentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"par\",\n        children: \"Guess the sentence! Starting typing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"par\",\n        children: \"The yellow blocks are meant for spaces\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"par\",\n        children: [\"Score: 0 out of \", sentence.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: data.sentence.split(/(\\s+)/).map((word, wordIndex) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: word.split('').map((letter, index) => {\n              if (index === 0 && wordIndex === 0) {\n                letterId = 0;\n              } else {\n                letterId += 1;\n              }\n\n              if (letter === ' ') {\n                var _sentenceToCompare$le;\n\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: letterId,\n                  naame: letterId,\n                  value: sentenceToCompare[letter],\n                  onChange: handleLettersInput,\n                  maxLength: 1,\n                  onKeyUp: nextItemChange,\n                  className: `${(_sentenceToCompare$le = sentenceToCompare[letterId]) !== null && _sentenceToCompare$le !== void 0 && _sentenceToCompare$le.correctGuess ? 'correct' : 'space'}`\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 56\n                }, this);\n              } else {\n                var _sentenceToCompare$le2;\n\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: letterId,\n                  naame: letterId,\n                  value: sentenceToCompare[letter],\n                  onChange: handleLettersInput,\n                  maxLength: 1,\n                  onKeyUp: nextItemChange,\n                  className: `${(_sentenceToCompare$le2 = sentenceToCompare[letterId]) !== null && _sentenceToCompare$le2 !== void 0 && _sentenceToCompare$le2.correctGuess ? 'correct' : 'letter'}`\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 56\n                }, this);\n              }\n            })\n          }, wordIndex + 100, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: checkCorrectGuess ? false : true,\n          className: `btn ${checkCorrectGuess ? correct : ''}`,\n          onClick: checkCorrectGuess,\n          children: \"Click\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 11\n  }, this);\n};\n\n_s(App, \"7WUFtC0jxqOcJnZ64hNB/R+IZiU=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Heading\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","scrambledWord","Heading","content","styles","textAlign","App","data","setData","sentence","setSentence","sentenceToCompare","setSentenceToCompare","letterId","getData","response","catch","err","console","log","message","handleLettersInput","e","preventDefault","target","id","value","correctGuess","arr","Array","from","map","item","index","Number","nextItemChange","keyCode","document","getElementById","focus","checkCorrectGuess","sentenceToCheckForCorrectness","Object","entries","isAllLetterCorrect","i","length","split","word","wordIndex","letter","correct"],"sources":["/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {fetchData} from './api/api';\nimport { scrambledWord } from './helpers/ScrambleWord';\nimport './App.css';\n\nconst Heading = ({ content }) => {\n     const styles = {\n          textAlign: 'center'\n     }\n\n     return (\n          <h1 style={ styles } id='scrambled-word'>{ content }</h1>\n     )\n}\n\nconst App = () => {\n     const [data, setData] = useState({sentence: ''});\n     const [sentence, setSentence] = useState('');\n     const [sentenceToCompare, setSentenceToCompare] = useState({});\n     let letterId;\n     \n     useEffect(() => {\n          const getData = async () => {\n               const response = await fetchData(10);\n               const { data } = await response.data;\n               setData(data);\n          };\n          \n          getData().catch(err => console.log(err.message));\n     },[]);\n\n     useEffect(() => {\n          if (data) setSentence(scrambledWord(data))\n     },[data]);\n\n     const handleLettersInput = (e) => {\n          e.preventDefault();\n          setSentenceToCompare({...sentenceToCompare, [e.target.id]: {value: e.target.value, correctGuess: false}})\n\n          // const itemToCompare = sentenceToCompare[e.target.id];\n          const arr = Array.from(data.sentence);\n          arr.map((item, index) => {\n               if(index === Number(e.target.id) && item === e.target.value){\n                    setSentenceToCompare({ ...sentenceToCompare, [e.target.id]: {...{}, correctGuess: true}})\n                    return true\n               } else {\n                    return false\n               }\n          })\n     };\n\n     const nextItemChange = (e) => {\n          if(e.keyCode === 46 || e.keyCode === 8){\n               const item = document.getElementById(`${Number(e.target.id) - 1}`);\n               if(!item) {\n                    return false\n               } \n               item.focus();\n          } else {\n               const item = document.getElementById(`${Number(e.target.id) + 1}`);\n               if(!item) {\n                    return false\n               } \n               item.focus()\n          }\n     };\n\n     const checkCorrectGuess = () => {\n          const sentenceToCheckForCorrectness = Object.entries(sentenceToCompare);\n          const isAllLetterCorrect = sentenceToCheckForCorrectness.map(i => i[1].correctGuess).length\n          const length = sentence.length;\n          console.log(isAllLetterCorrect);\n          console.log(length)\n          return isAllLetterCorrect === length\n     }\n\n     return (\n          <main id='main'>\n               <div className='container'>\n                    <Heading content={ sentence }/>\n                    <p className='par'>Guess the sentence! Starting typing</p>\n                    <p className='par'>The yellow blocks are meant for spaces</p>\n                    <p className='par'>Score: 0 out of {sentence.length}</p>\n                    <form>\n                         {data.sentence.split(/(\\s+)/).map((word, wordIndex) => {\n\n                              return (\n                                   <div key={ wordIndex + 100 }>\n                                        { word.split('').map((letter, index) => {\n                                             if(index === 0 && wordIndex === 0){\n                                                  letterId = 0;\n                                             } else {\n                                                  letterId += 1;\n                                             }\n                                             if(letter === ' ' ){\n                                                  return (\n                                                       <input \n                                                       key={index} \n                                                       id={letterId}\n                                                       naame={letterId}\n                                                       value={ sentenceToCompare[letter] } \n                                                       onChange={ handleLettersInput } \n                                                       maxLength={1} \n                                                       onKeyUp={ nextItemChange }\n                                                       className={`${ sentenceToCompare[letterId]?.correctGuess ? 'correct' : 'space' }`}\n                                                       />\n                                                  )\n                                             } else {\n                                                  return (\n                                                       <input \n                                                            key={index} \n                                                            id={letterId}\n                                                            naame={letterId} \n                                                            value={ sentenceToCompare[letter] } \n                                                            onChange={ handleLettersInput } \n                                                            maxLength={1} \n                                                            onKeyUp={ nextItemChange }\n                                                            className={`${ sentenceToCompare[letterId]?.correctGuess ? 'correct' : 'letter' }`}\n                                                            />\n                                                  ) \n                                             }\n                                        })}\n                                   </div>\n                              )\n                         })}\n                    </form>\n                    <div>\n                         <button \n                              disabled={checkCorrectGuess ? false : true} \n                              className={`btn ${ checkCorrectGuess ? correct : '' }`} \n                              onClick={ checkCorrectGuess }>Click</button>\n                    </div>\n               </div>\n          </main>\n     );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}