{"ast":null,"code":"var _jsxFileName = \"/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { fetchData } from './api/api';\nimport { scrambledWord } from './helpers/ScrambleWord';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Heading = _ref => {\n  let {\n    content\n  } = _ref;\n  const styles = {\n    textAlign: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    style: styles,\n    id: \"scrambled-word\",\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 11\n  }, this);\n};\n\n_c = Heading;\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState({\n    sentence: ''\n  });\n  const [sentence, setSentence] = useState('');\n  const [sentenceToCompare, setSentenceToCompare] = useState({});\n  const [correctGuess, setCorrectGuess] = useState(false);\n  let count = 0;\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetchData(3);\n      const {\n        data\n      } = await response.data;\n      setData(data);\n    };\n\n    getData().catch(err => console.log(err.message));\n  }, []);\n  useEffect(() => {\n    if (data) setSentence(scrambledWord(data));\n  }, [data]);\n\n  const handleLettersInput = e => {\n    e.preventDefault();\n    setSentenceToCompare({ ...sentenceToCompare,\n      [e.target.id]: {\n        value: e.target.value,\n        correctGuess: false\n      }\n    });\n    console.log(e.target);\n    const itemToCompare = sentenceToCompare[e.target.id];\n    const arr = Array.from(data.sentence);\n    const arrToCompare = Array.from(sentenceToCompare);\n    console.log(arr);\n    console.log(arrToCompare);\n  };\n\n  const nextItemChange = e => {\n    const item = document.getElementById(`${Number(e.target.id) + 1}`);\n\n    if (!item) {\n      return false;\n    }\n\n    item.focus();\n  };\n\n  console.log(correctGuess);\n  console.log(sentenceToCompare);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    id: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        content: sentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"par\",\n        children: \"Guess the sentence! Starting typing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"par\",\n        children: \"The yellow blocks are meant for spaces\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"par\",\n        children: \"Score: 0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: data.sentence.split(/(\\s+)/).map((word, wordIndex) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: word.split('').map((letter, index) => {\n              count += 1;\n\n              if (letter === ' ') {\n                var _sentenceToCompare$co;\n\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: count,\n                  value: sentenceToCompare[letter],\n                  onChange: handleLettersInput,\n                  maxLength: 1,\n                  onKeyUp: nextItemChange,\n                  className: `${(_sentenceToCompare$co = sentenceToCompare[count]) !== null && _sentenceToCompare$co !== void 0 && _sentenceToCompare$co.correctGuess ? 'correct' : 'space'}`\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 56\n                }, this);\n              } else {\n                var _sentenceToCompare$co2;\n\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: count,\n                  value: sentenceToCompare[letter],\n                  onChange: handleLettersInput,\n                  maxLength: 1,\n                  onKeyUp: nextItemChange,\n                  className: `${(_sentenceToCompare$co2 = sentenceToCompare[count]) !== null && _sentenceToCompare$co2 !== void 0 && _sentenceToCompare$co2.correctGuess ? 'correct' : 'letter'}`\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 56\n                }, this);\n              }\n            })\n          }, wordIndex + 100, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 11\n  }, this);\n};\n\n_s(App, \"tYx3/jTnqBJN5IYSLorIXLu0SgI=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Heading\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","scrambledWord","Heading","content","styles","textAlign","App","data","setData","sentence","setSentence","sentenceToCompare","setSentenceToCompare","correctGuess","setCorrectGuess","count","getData","response","catch","err","console","log","message","handleLettersInput","e","preventDefault","target","id","value","itemToCompare","arr","Array","from","arrToCompare","nextItemChange","item","document","getElementById","Number","focus","split","map","word","wordIndex","letter","index"],"sources":["/Users/mikhailzapolskyi/study-projects/word-scrambler/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {fetchData} from './api/api';\nimport { scrambledWord } from './helpers/ScrambleWord';\nimport './App.css';\n\nconst Heading = ({ content }) => {\n     const styles = {\n          textAlign: 'center'\n     }\n\n     return (\n          <h1 style={ styles } id='scrambled-word'>{ content }</h1>\n     )\n}\n\nconst App = () => {\n     const [data, setData] = useState({sentence: ''});\n     const [sentence, setSentence] = useState('');\n     const [sentenceToCompare, setSentenceToCompare] = useState({});\n     const [correctGuess, setCorrectGuess] = useState(false);\n     let count = 0;\n     \n\n\n     useEffect(() => {\n          const getData = async () => {\n               const response = await fetchData(3);\n               const { data } = await response.data;\n               setData(data);\n          };\n          \n          getData().catch(err => console.log(err.message));\n     },[]);\n\n     useEffect(() => {\n          if (data) setSentence(scrambledWord(data))\n     },[data]);\n\n     const handleLettersInput = (e) => {\n          e.preventDefault();\n          setSentenceToCompare({...sentenceToCompare, [e.target.id]: {value: e.target.value, correctGuess: false}})\n          console.log(e.target)\n\n          const itemToCompare = sentenceToCompare[e.target.id];\n          const arr = Array.from(data.sentence);\n          const arrToCompare = Array.from(sentenceToCompare);\n\n          console.log(arr);\n          console.log(arrToCompare)\n     };\n\n     const nextItemChange = (e) => {\n          const item = document.getElementById(`${Number(e.target.id) + 1}`);\n          if(!item) {\n               return false\n          } \n          item.focus()\n     };\n     console.log(correctGuess)\n     console.log(sentenceToCompare)\n     return (\n          <main id='main'>\n               <div className='container'>\n                    <Heading content={ sentence }/>\n                    <p className='par'>Guess the sentence! Starting typing</p>\n                    <p className='par'>The yellow blocks are meant for spaces</p>\n                    <p className='par'>Score: 0</p>\n                    <form>\n                         {data.sentence.split(/(\\s+)/).map((word, wordIndex) => {\n\n                              return (\n                                   <div key={ wordIndex + 100 }>\n                                        { word.split('').map((letter, index) => {\n                                             count += 1;\n                                             if(letter === ' ' ){\n                                                  return (\n                                                       <input \n                                                       key={index} \n                                                       id={count} \n                                                       value={ sentenceToCompare[letter] } \n                                                       onChange={ handleLettersInput } \n                                                       maxLength={1} \n                                                       onKeyUp={ nextItemChange }\n                                                       className={`${ sentenceToCompare[count]?.correctGuess ? 'correct' : 'space' }`}\n                                                       />\n                                                  )\n                                             } else {\n                                                  return (\n                                                       <input \n                                                            key={index} \n                                                            id={count} \n                                                            value={ sentenceToCompare[letter] } \n                                                            onChange={ handleLettersInput } \n                                                            maxLength={1} \n                                                            onKeyUp={ nextItemChange }\n                                                            className={`${ sentenceToCompare[count]?.correctGuess ? 'correct' : 'letter' }`}\n                                                            />\n                                                  ) \n                                             }\n                                        })}\n                                   </div>\n                              )\n                         })}\n                    </form>\n               </div>\n          </main>\n     );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}